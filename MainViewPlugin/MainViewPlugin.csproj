<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <TargetFramework>net60-windows</TargetFramework>
    <GenerateAssemblyInfo>false</GenerateAssemblyInfo>
    <UseWPF>true</UseWPF>
    <AppendTargetFrameworkToOutputPath>false</AppendTargetFrameworkToOutputPath>
    <Configurations>Release;Beta;Alpha;Debug</Configurations>
    <ContentSQLiteInteropFiles>true</ContentSQLiteInteropFiles>
    <CopySQLiteInteropFiles>false</CopySQLiteInteropFiles>
    <CleanSQLiteInteropFiles>false</CleanSQLiteInteropFiles>
    <CollectSQLiteInteropFiles>false</CollectSQLiteInteropFiles>
    <PublishSingleFile>true</PublishSingleFile>
    <SelfContained>true</SelfContained>
    <IncludeNativeLibrariesForSelfExtract>true</IncludeNativeLibrariesForSelfExtract>
    <RunPostBuildEvent>Always</RunPostBuildEvent>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)|$(Platform)' == 'Release|AnyCPU' ">
    <OutputPath>bin\Release\</OutputPath>
    <DefineConstants>TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <DebugType>embedded</DebugType>
    <Optimize>true</Optimize>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)' == 'Beta|AnyCPU'">
    <OutputPath>bin\Beta\</OutputPath>
    <DefineConstants>TRACE;BETA</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <Optimize>true</Optimize>
    <DebugType>embedded</DebugType>
    <PlatformTarget>AnyCPU</PlatformTarget>
    <ErrorReport>prompt</ErrorReport>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Alpha|AnyCPU'">
    <OutputPath>bin\Alpha\</OutputPath>
    <DefineConstants>TRACE;DEBUG;ALPHA</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <DebugType>embedded</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <Optimize>false</Optimize>
    <PlatformTarget>AnyCPU</PlatformTarget>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <OutputPath>bin\Debug\</OutputPath>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <WarningLevel>4</WarningLevel>
    <DebugType>embedded</DebugType>
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>
  <ItemGroup>
    <PackageReference Include="Extended.Wpf.Toolkit" Version="4.5.0" />
    <PackageReference Include="Microsoft.Data.Sqlite.Core" Version="5.0.0" />
    <PackageReference Include="Microsoft.Xaml.Behaviors.Wpf" Version="1.1.39" />
    <PackageReference Include="Newtonsoft.Json" Version="13.0.1" />
    <PackageReference Include="SQLitePCLRaw.bundle_winsqlite3" Version="2.0.4" />
    <PackageReference Include="System.ComponentModel.Composition" Version="7.0.0" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="..\BigoIF\BigoIF.csproj" />
    <ProjectReference Include="..\BigoSitePlugin\BigoSitePlugin.csproj" />
    <ProjectReference Include="..\BrowserCookieImplementations\BrowserCookieImplementations.csproj" />
    <ProjectReference Include="..\BrowserCookieInterfaces\BrowserCookieInterfaces.csproj" />
    <ProjectReference Include="..\CommentViewerCommon\CommentViewerCommon.csproj" />
    <ProjectReference Include="..\Common\Common.csproj" />
    <ProjectReference Include="..\MildomIF\MildomIF.csproj" />
    <ProjectReference Include="..\MildomSitePlugin\MildomSitePlugin.csproj" />
    <ProjectReference Include="..\MirrativIF\MirrativIF.csproj" />
    <ProjectReference Include="..\MirrativSitePlugin\MirrativSitePlugin.csproj" />
    <ProjectReference Include="..\NicoLiveIF\NicoLiveIF.csproj" />
    <ProjectReference Include="..\NicoSitePlugin2\NicoSitePlugin2.csproj" />
    <ProjectReference Include="..\OpenrecIF\OpenrecIF.csproj" />
    <ProjectReference Include="..\OpenrecSitePlugin\OpenrecSitePlugin.csproj" />
    <ProjectReference Include="..\MixchIF\MixchIF.csproj" />
    <ProjectReference Include="..\MixchSitePlugin\MixchSitePlugin.csproj" />
    <ProjectReference Include="..\ShowRoomIF\ShowRoomIF.csproj" />
    <ProjectReference Include="..\ShowRoomSitePlugin\ShowRoomSitePlugin.csproj" />
    <ProjectReference Include="..\SitePluginCommon\SitePluginCommon.csproj" />
    <ProjectReference Include="..\TestSiteIF\TestSiteIF.csproj" />
    <ProjectReference Include="..\TestSitePlugin\TestSitePlugin.csproj" />
    <ProjectReference Include="..\TwicasIF\TwicasIF.csproj" />
    <ProjectReference Include="..\TwicasSitePlugin\TwicasSitePlugin.csproj" />
    <ProjectReference Include="..\TwitchIF\TwitchIF.csproj" />
    <ProjectReference Include="..\TwitchSitePlugin\TwitchSitePlugin.csproj" />
    <ProjectReference Include="..\WhowatchIF\WhowatchIF.csproj" />
    <ProjectReference Include="..\WhowatchSitePlugin\WhowatchSitePlugin.csproj" />
    <ProjectReference Include="..\YouTubeLiveIF\YouTubeLiveIF.csproj" />
    <ProjectReference Include="..\YouTubeLiveSitePlugin\YouTubeLiveSitePlugin.csproj" />
    <ProjectReference Include="..\BouyomiPlugin\BouyomiPlugin.csproj" />
  </ItemGroup>
  <Target Name="PostBuildMacros">
    <GetAssemblyIdentity AssemblyFiles="$(TargetPath)">
      <Output TaskParameter="Assemblies" ItemName="Targets" />
    </GetAssemblyIdentity>
    <ItemGroup>
      <VersionNumber Include="$([System.Text.RegularExpressions.Regex]::Replace(&quot;%(Targets.Version)&quot;, &quot;^([^\.]+)\.([^\.]+)\.([^\.]+)(.*)$&quot;, &quot;$1.$2.$3&quot;))" />
    </ItemGroup>
  </Target>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|AnyCPU'">
    <MyOutputDir>$(SolutionDir)Output\Release\</MyOutputDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Beta|AnyCPU'">
    <MyOutputDir>$(SolutionDir)Output\Beta\</MyOutputDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Alpha|AnyCPU'">
    <MyOutputDir>$(SolutionDir)Output\Alpha\</MyOutputDir>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|AnyCPU'">
    <MyOutputDir>$(SolutionDir)Output\Debug\</MyOutputDir>
  </PropertyGroup>
  <Target Name="PostBuild" AfterTargets="PostBuildEvent">
  </Target>
  <Target Name="MyAfterPublish" AfterTargets="Publish">
    <Exec Command="::ReadMe.txtをコピー&#xD;&#xA;xcopy /y &quot;$(ProjectDir)ReadMe.txt&quot; &quot;$(MyOutputDir)&quot;&#xD;&#xA;&#xD;&#xA;:: settingsディレクトリを作成&#xD;&#xA;if not exist &quot;$(OutDir)settings&quot; mkdir &quot;$(MyOutputDir)settings&quot;&#xD;&#xA;:: zip化した時に空ディレクトリは無くなってしまうから何かを置いておく必要がある&#xD;&#xA;if not exist &quot;$(OutDir)settings\placeholder&quot; powershell New-Item &quot;$(MyOutputDir)settings\placeholder&quot; -ItemType file&#xD;&#xA;&#xD;&#xA;:: BouyomiPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(OutDir)plugins\Bouyomi&quot; mkdir &quot;$(MyOutputDir)plugins\Bouyomi&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\BouyomiPlugin\bin\$(ConfigurationName)\*&quot; &quot;$(MyOutputDir)plugins\Bouyomi&quot;&#xD;&#xA;&#xD;&#xA;:: CommentGeneratorPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(OutDir)plugins\CommentGenerator&quot; mkdir &quot;$(MyOutputDir)plugins\CommentGenerator&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\CommentGeneratorPlugin\bin\$(ConfigurationName)\*&quot; &quot;$(MyOutputDir)plugins\CommentGenerator\&quot;&#xD;&#xA;&#xD;&#xA;:: YoyakuPluginのファイルを全部持ってくる&#xD;&#xA;if not exist &quot;$(OutDir)plugins\Yoyaku&quot; mkdir &quot;$(MyOutputDir)plugins\Yoyaku&quot;&#xD;&#xA;copy &quot;$(SolutionDir)\YoyakuPlugin\bin\$(ConfigurationName)\*&quot; &quot;$(MyOutputDir)plugins\Yoyaku&quot;&#xD;&#xA;&#xD;&#xA;:: 自動アップデートに必要なlist.txtを作成&#xD;&#xA;powershell.exe -ExecutionPolicy Unrestricted -File &quot;$(ProjectDir)\updateFileList.ps1&quot; -TargetDir &quot;$(TargetDir)\&quot;&#xD;&#xA;&#xD;&#xA;::zip化&#xD;&#xA;if $(ConfigurationName) == Release (&#xD;&#xA;  powershell.exe -ExecutionPolicy Unrestricted -File zipping.ps1 -outputDir &quot;$(SolutionDir)Output&quot; -targetDir &quot;$(SolutionDir)Output\Release\*&quot; -exePath &quot;$(TargetPath)&quot; -zipFileSuffix &quot;stable&quot;&#xD;&#xA;) else if $(ConfigurationName) == Beta (&#xD;&#xA;  powershell.exe -ExecutionPolicy Unrestricted -File zipping.ps1 -outputDir &quot;$(SolutionDir)Output&quot; -targetDir &quot;$(SolutionDir)Output\Beta\*&quot; -exePath &quot;$(TargetPath)&quot; -zipFileSuffix &quot;beta&quot;&#xD;&#xA;) else if $(ConfigurationName) == Alpha (&#xD;&#xA;  powershell.exe -ExecutionPolicy Unrestricted -File zipping.ps1 -outputDir &quot;$(SolutionDir)Output&quot; -targetDir &quot;$(SolutionDir)Output\Alpha\*&quot; -exePath &quot;$(TargetPath)&quot; -zipFileSuffix &quot;alpha&quot;&#xD;&#xA;)" />
  </Target>
  <Target Name="PreBuild" BeforeTargets="PreBuildEvent">
    <Exec Command=":: 余分なファイルをリリースしてしまわないように一旦全部消す&#xD;&#xA;if $(ConfigurationName) == Release (&#xD;&#xA;  rd /s /q &quot;$(TargetDir)&quot;&#xD;&#xA;  rd /s /q &quot;$(MyOutputDir)&quot;&#xD;&#xA;) else if $(ConfigurationName) == Beta (&#xD;&#xA;  rd /s /q &quot;$(TargetDir)&quot;&#xD;&#xA;  rd /s /q &quot;$(MyOutputDir)&quot;&#xD;&#xA;) else if $(ConfigurationName) == Alpha (&#xD;&#xA;  rd /s /q &quot;$(TargetDir)&quot;&#xD;&#xA;  rd /s /q &quot;$(MyOutputDir)&quot;&#xD;&#xA;)&#xD;&#xA;" />
  </Target>
</Project>
