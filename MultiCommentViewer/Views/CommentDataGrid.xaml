<UserControl x:Class="MultiCommentViewer.CommentDataGrid"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:MultiCommentViewer"
             xmlns:w="clr-namespace:Common.Wpf;assembly=Common"
             xmlns:i="clr-namespace:System.Windows.Interactivity;assembly=System.Windows.Interactivity"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance local:MainViewModel, IsDesignTimeCreatable=True}"
             d:DesignHeight="300" d:DesignWidth="370">
    <UserControl.Resources>
        <w:NotConverter x:Key="notConverter" />
        <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter" />
        <w:IntToFontSizeConverter x:Key="intToFontConverter" />
        <w:DataGridLengthValueConverter x:Key="dataGridLengthConverter" />
        <w:MessageConverter x:Key="messageConverter" />
        <w:NameConverter x:Key="nameConverter" />
        <w:ThumbnailConverter x:Key="thumbnailConverter" />
        <Style x:Key="ContextMenuStyle" TargetType="{x:Type ContextMenu}">
            <Setter Property="SnapsToDevicePixels" Value="True" />
            <Setter Property="Background" Value="{Binding ContextMenuBackground}" />
            <Setter Property="Foreground" Value="{Binding ContextMenuForeground}" />
            <Setter Property="BorderBrush" Value="{Binding ContextMenuBorderBrush}" />
        </Style>
        <ContextMenu x:Key="CommentDataGridHeaderContextMenu" DataContext="{Binding DataContext, Source={x:Reference dummyElement}}" Style="{StaticResource ContextMenuStyle}">
            <MenuItem Header="接続名" IsChecked="{Binding IsShowConnectionName, Mode=TwoWay}" IsCheckable="True" />
            <MenuItem Header="サムネ" IsChecked="{Binding IsShowThumbnail, Mode=TwoWay}" IsCheckable="True" />
            <MenuItem Header="コメントID" IsChecked="{Binding IsShowCommentId, Mode=TwoWay}" IsCheckable="True" />
            <MenuItem Header="ユーザ名" IsChecked="{Binding IsShowUsername, Mode=TwoWay}" IsCheckable="True" />
            <!--<MenuItem Header="ユーザID" IsChecked="{Binding IsShowUserId, Mode=TwoWay}" IsCheckable="True" />-->

            <MenuItem Header="投稿時間" IsChecked="{Binding IsShowPostTime, Mode=TwoWay}" IsCheckable="True" />
            <!--<MenuItem Header="経過時間" IsChecked="{Binding IsShowPostElapsed, Mode=TwoWay}" IsCheckable="True" />-->
            <MenuItem Header="情報" IsChecked="{Binding IsShowInfo, Mode=TwoWay}" IsCheckable="True" />
        </ContextMenu>
    </UserControl.Resources>
    <Grid>
        <!--Element treeに属さないelementにDataContextを渡すためのdummy element-->
        <FrameworkElement x:Name="dummyElement" Visibility="Collapsed" DataContext="{Binding}"/>
        <DataGrid
            x:Name="dataGrid"
            ItemsSource="{Binding Comments, IsAsync=True}"
            SelectedValue="{Binding SelectedComment}"
            HorizontalAlignment="Stretch"
            VerticalAlignment="Stretch"
            Background="{Binding CommentListBackground}"
            BorderBrush="{Binding CommentListBorderBrush}"
            VerticalScrollBarVisibility="Visible"
            HorizontalScrollBarVisibility="Visible"
            VerticalGridLinesBrush="{Binding VerticalGridLineBrush}"
            HorizontalGridLinesBrush="{Binding HorizontalGridLineBrush}"
            VirtualizingStackPanel.ScrollUnit="{Binding ScrollUnit}"
            Margin="5"
            Grid.Row="5"
            ScrollViewer.ScrollChanged="DataGridScrollChanged"
            >
            <DataGrid.Resources>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="{Binding SelectedRowBackColor}"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.HighlightTextBrushKey}" Color="{Binding SelectedRowForeColor}" />
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightBrushKey}" Color="{Binding SelectedRowBackColor}"/>
                <SolidColorBrush x:Key="{x:Static SystemColors.InactiveSelectionHighlightTextBrushKey}" Color="{Binding SelectedRowForeColor}"/>
                <ContextMenu x:Key="commentContext" DataContext="{Binding DataContext, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type Window}}}">
                    <MenuItem Header="コメントをコピー" Command="{Binding CommentCopyCommand}" />
                    <MenuItem Header="URLを開く" IsEnabled="{Binding ContainsUrl}" Command="{Binding OpenUrlCommand}" />
                    <MenuItem Header="日本語に翻訳する" Command="{Binding TranslateCommand}" />
                    <Separator />
                    <MenuItem x:Name="UserInfoMenuItem" Header="ユーザ情報" Command="{Binding ShowUserInfoCommand}" />
                </ContextMenu>
                <Style TargetType="{x:Type DataGridRow}">
                    <Setter Property="FontFamily" Value="{Binding FontFamily}" />
                    <Setter Property="FontStyle" Value="{Binding FontStyle}" />
                    <Setter Property="FontWeight" Value="{Binding FontWeight}" />
                    <Setter Property="FontSize" Value="{Binding FontSize, Converter={StaticResource intToFontConverter}}"/>
                    <Setter Property="Background" Value="{Binding Background}" />
                    <Setter Property="Foreground" Value="{Binding Foreground}" />
                    <Setter Property="ContextMenu" Value="{StaticResource commentContext}" />
                    <!--<Setter Property="IsSelected" Value="{Binding IsSelected,Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" />-->
                    <Style.Triggers>
                        <!--IsVisible==false&&ForceShowInvisibleComments==falseの時にだけVisibilityがCollapsedになる-->
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsVisible}" Value="False" />
                                <Condition Binding="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type local:CommentDataGrid}}, Path=ForceShowInvisibleComments}" Value="False" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
                <ContextMenu x:Key="listViewHeaderContext" DataContext="{Binding DataContext, Source={x:Reference dummyElement}}">
                    <MenuItem Header="接続名" IsChecked="{Binding IsShowConnectionName, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="サムネ" IsChecked="{Binding IsShowThumbnail, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="コメントID" IsChecked="{Binding IsShowCommentId, Mode=TwoWay}" IsCheckable="True" />
                    <MenuItem Header="ユーザ名" IsChecked="{Binding IsShowUsername, Mode=TwoWay}" IsCheckable="True" />
                    <!--<MenuItem Header="ユーザID" IsChecked="{Binding IsShowUserId, Mode=TwoWay}" IsCheckable="True" />-->

                    <MenuItem Header="投稿時間" IsChecked="{Binding IsShowPostTime, Mode=TwoWay}" IsCheckable="True" />
                    <!--<MenuItem Header="経過時間" IsChecked="{Binding IsShowPostElapsed, Mode=TwoWay}" IsCheckable="True" />-->
                    <MenuItem Header="情報" IsChecked="{Binding IsShowInfo, Mode=TwoWay}" IsCheckable="True" />
                </ContextMenu>
                <Style TargetType="{x:Type DataGridColumnHeader}">
                    <Setter Property="ContextMenu" Value="{StaticResource listViewHeaderContext}" />
                </Style>
            </DataGrid.Resources>
            <DataGrid.Columns>
                <DataGridTemplateColumn Header="接続名" 
                                            DisplayIndex="{Binding DataContext.ConnectionNameDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=0}"
                                            Width="{Binding DataContext.ConnectionNameWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            Visibility="{Binding DataContext.IsShowConnectionName, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding ConnectionName.Name}" Padding="5,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="ｻﾑﾈ" 
                                            DisplayIndex="{Binding DataContext.ThumbnailDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=1}"
                                            Width="{Binding DataContext.ThumbnailWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            Visibility="{Binding DataContext.IsShowThumbnail, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <w:BindableTextBlock TextWrapping="NoWrap" InlineList="{Binding Thumbnail, Converter={StaticResource thumbnailConverter}}" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="コメントID"
                                        DisplayIndex="{Binding DataContext.CommentIdDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=2}"
                                        Visibility="{Binding DataContext.IsShowCommentId, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                                        Width="{Binding DataContext.CommentIdWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                        >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock TextWrapping="NoWrap" Text="{Binding Id}"  Margin="5,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="ユーザ名" 
                                            DisplayIndex="{Binding DataContext.UsernameDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=3}"
                                            Visibility="{Binding DataContext.IsShowUsername, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}"
                                            Width="{Binding DataContext.UsernameWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <w:BindableTextBlock TextWrapping="{Binding UserNameWrapping, Mode=OneWay}" InlineList="{Binding NameItems, Converter={StaticResource nameConverter}}"
                                                  Margin="5,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="コメント"
                                            DisplayIndex="{Binding DataContext.MessageDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=4}"
                                            Visibility="Visible"
                                            Width="{Binding DataContext.MessageWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            >
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <w:BindableTextBlock TextWrapping="Wrap"
                                                  InlineList="{Binding MessageItems, Converter={StaticResource messageConverter}, ConverterParameter=true}" Margin="5,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="投稿時間" 
                                            DisplayIndex="{Binding DataContext.PostTimeDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=5}"
                                            Width="{Binding DataContext.PostTimeWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            Visibility="{Binding DataContext.IsShowPostTime, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding PostTime}" Margin="5,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
                <DataGridTemplateColumn Header="情報" 
                                            DisplayIndex="{Binding DataContext.InfoDisplayIndex, Mode=TwoWay, Source={x:Reference dummyElement}, FallbackValue=6}"
                                            Width="{Binding DataContext.InfoWidth, Mode=TwoWay, Source={x:Reference dummyElement}, Converter={StaticResource dataGridLengthConverter}}"
                                            Visibility="{Binding DataContext.IsShowInfo, Source={x:Reference dummyElement}, Converter={StaticResource booleanToVisibilityConverter}}">
                    <DataGridTemplateColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Info}" Margin="5,0" />
                        </DataTemplate>
                    </DataGridTemplateColumn.CellTemplate>
                </DataGridTemplateColumn>
            </DataGrid.Columns>
        </DataGrid>
    </Grid>
</UserControl>
